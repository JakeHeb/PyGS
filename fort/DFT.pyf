!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module DFT ! in 
    interface  ! in :DFT
        module dft ! in :DFT:DFT.f90
            use globalparams
            subroutine phasedftone(dat,wvl,ps) ! in :DFT:DFT.f90:dft
                real(kind=8) dimension(:),intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: wvl
                real(kind=8) dimension(size(wvl)),intent(out),depend(wvl) :: ps
            end subroutine phasedftone
            subroutine idft(dat,dist,wvl,ps) ! in :DFT:DFT.f90:dft
                integer(kind=8) dimension(:),intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: dist
                real(kind=8) dimension(:),intent(in) :: wvl
                real(kind=8) dimension(size(wvl)),intent(out),depend(wvl) :: ps
            end subroutine idft
            subroutine idft(dat,wvl,ps) ! in :DFT:DFT.f90:dft
                integer(kind=8) dimension(:,:),intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: wvl
                real(kind=8) dimension(size(wvl)),intent(out),depend(wvl) :: ps
            end subroutine idft
            subroutine phasedft_two(dat,wvl1,wvl2,ps) ! in :DFT:DFT.f90:dft
                real(kind=8) dimension(:,:),intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: wvl1
                real(kind=8) dimension(:),intent(in) :: wvl2
                real(kind=8) dimension(size(wvl1),size(wvl2)),intent(out),depend(wvl1,wvl2) :: ps
            end subroutine phasedft_two
            subroutine dft_two(dist1,dist2,dat,wvl1,wvl2,ps) ! in :DFT:DFT.f90:dft
                real(kind=8) dimension(:),intent(in) :: dist1
                real(kind=8) dimension(:),intent(in) :: dist2
                real(kind=8) dimension(:,:),intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: wvl1
                real(kind=8) dimension(:),intent(in) :: wvl2
                real(kind=8) allocatable,dimension(size(wvl1),size(wvl2)),intent(out),depend(wvl1,wvl2) :: ps
            end subroutine dft_two
            subroutine phasedft_three(dat,wvl1,wvl2,wvl3,ps) ! in :DFT:DFT.f90:dft
                real(kind=8) dimension(:,:,:),intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: wvl1
                real(kind=8) dimension(:),intent(in) :: wvl2
                real(kind=8) dimension(:),intent(in) :: wvl3
                real(kind=8) dimension(size(wvl1),size(wvl2),size(wvl3)),intent(out),depend(wvl1,wvl2,wvl3) :: ps
            end subroutine phasedft_three
            subroutine dft_three(dist1,dist2,dist3,dat,wvl1,wvl2,wvl3,ps) ! in :DFT:DFT.f90:dft
                real(kind=8) dimension(:),intent(in) :: dist1
                real(kind=8) dimension(:),intent(in) :: dist2
                real(kind=8) dimension(:),intent(in) :: dist3
                real(kind=8) intent(in) :: dat
                real(kind=8) dimension(:),intent(in) :: wvl1
                real(kind=8) dimension(:),intent(in) :: wvl2
                real(kind=8) dimension(:),intent(in) :: wvl3
                real(kind=8) dimension(size(wvl1),size(wvl2),size(wvl3)),intent(out),depend(wvl1,wvl2,wvl3) :: ps
            end subroutine dft_three
        end module dft
    end interface 
end python module DFT

! This file was auto-generated with f2py (version:1).
! See http://cens.ioc.ee/projects/f2py2e/
